title,prompt,solution,hints,language,difficulty,topic
Reverse a String (Python),Write a function that returns the reverse of the input string. Write the Python function as specified.,"def reverse_string(s: str) -> str:
    return s[::-1]",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Easy,Strings
Is Palindrome (Python),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the Python function as specified.","def is_palindrome(s: str) -> bool:
    t=''.join(ch.lower() for ch in s if ch.isalnum())
    return t==t[::-1]",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Easy,Strings
Two Sum (Python),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the Python function as specified.","def two_sum(nums, target):
    m={}
    for i,x in enumerate(nums):
        if target-x in m: return [m[target-x], i]
        m[x]=i
    return []",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Medium,Arrays
Binary Search (Python),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the Python function as specified.","def binary_search(a, x):
    lo,hi=0,len(a)-1
    while lo<=hi:
        mid=(lo+hi)//2
        if a[mid]==x: return mid
        if a[mid]<x: lo=mid+1
        else: hi=mid-1
    return -1",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Easy,Search/Sort
Valid Parentheses (Python),"Given a string of brackets, determine if the order is valid. Write the Python function as specified.","def is_valid(s: str) -> bool:
    m={')':'(',']':'[','}':'{'}
    st=[]
    for ch in s:
        if ch in m.values(): st.append(ch)
        elif ch in m: 
            if not st or st.pop()!=m[ch]: return False
    return not st",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Medium,Stack/Queue
Max Subarray (Python),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the Python function as specified.,"def max_subarray(a):
    best=cur=a[0]
    for x in a[1:]:
        cur=max(x,cur+x)
        best=max(best,cur)
    return best",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Medium,Arrays
Greatest Common Divisor (Python),Compute the GCD of two integers using the Euclidean algorithm. Write the Python function as specified.,"def gcd(a,b):
    while b: a,b=b,a%b
    return a",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Easy,Math
Longest Common Subsequence (Python),Return the length of the longest common subsequence of two strings. Write the Python function as specified.,"def lcs(a,b):
    n,m=len(a),len(b); dp=[[0]*(m+1) for _ in range(n+1)]
    for i in range(n):
        for j in range(m):
            dp[i+1][j+1]=dp[i][j]+1 if a[i]==b[j] else max(dp[i][j+1],dp[i+1][j])
    return dp[n][m]",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Python,Hard,DP
Reverse a String (JS),Write a function that returns the reverse of the input string. Write the JS function as specified.,function reverseString(s){ return s.split('').reverse().join(''); },Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Easy,Strings
Is Palindrome (JS),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the JS function as specified.",function isPalindrome(s){ const t=(s.toLowerCase().match(/[a-z0-9]/g)||[]).join(''); return t===t.split('').reverse().join(''); },Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Easy,Strings
Two Sum (JS),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the JS function as specified.","function twoSum(nums,target){const m=new Map();for(let i=0;i<nums.length;i++){const x=nums[i];if(m.has(target-x))return [m.get(target-x),i];m.set(x,i);}return [];}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Medium,Arrays
Binary Search (JS),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the JS function as specified.","function binarySearch(a,x){let lo=0,hi=a.length-1;while(lo<=hi){const m=(lo+hi>>1);if(a[m]===x)return m;if(a[m]<x)lo=m+1;else hi=m-1;}return -1;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Easy,Search/Sort
Valid Parentheses (JS),"Given a string of brackets, determine if the order is valid. Write the JS function as specified.","function isValid(s){const m={')':'(',']':'[','}':'{'};const st=[];for(const ch of s){if('([{'.includes(ch))st.push(ch);else if(')]}'.includes(ch)){if(st.pop()!==m[ch])return false;}}return st.length===0;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Medium,Stack/Queue
Max Subarray (JS),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the JS function as specified.,"function maxSubArray(a){let best=a[0],cur=a[0];for(let i=1;i<a.length;i++){cur=Math.max(a[i],cur+a[i]);best=Math.max(best,cur);}return best;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Medium,Arrays
Greatest Common Divisor (JS),Compute the GCD of two integers using the Euclidean algorithm. Write the JS function as specified.,"function gcd(a,b){while(b){[a,b]=[b,a%b]}return a;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Easy,Math
Longest Common Subsequence (JS),Return the length of the longest common subsequence of two strings. Write the JS function as specified.,"function lcs(a,b){const n=a.length,m=b.length,dp=Array.from({length:n+1},()=>Array(m+1).fill(0));for(let i=0;i<n;i++){for(let j=0;j<m;j++){dp[i+1][j+1]=a[i]===b[j]?dp[i][j]+1:Math.max(dp[i][j+1],dp[i+1][j]);}}return dp[n][m];}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,JS,Hard,DP
Reverse a String (Java),Write a function that returns the reverse of the input string. Write the Java function as specified.,class Solution{ String reverseString(String s){ return new StringBuilder(s).reverse().toString(); }},Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Easy,Strings
Is Palindrome (Java),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the Java function as specified.","class Solution{ boolean isPalindrome(String s){ var t=s.toLowerCase().replaceAll(""[^a-z0-9]"","""" ); return new StringBuilder(t).reverse().toString().equals(t);} }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Easy,Strings
Two Sum (Java),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the Java function as specified.","import java.util.*; class Solution{ int[] twoSum(int[] a,int t){ Map<Integer,Integer> m=new HashMap<>(); for(int i=0;i<a.length;i++){ if(m.containsKey(t-a[i])) return new int[]{m.get(t-a[i]),i}; m.put(a[i],i);} return new int[0]; }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Medium,Arrays
Binary Search (Java),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the Java function as specified.","class Solution{ int binarySearch(int[] a,int x){ int lo=0,hi=a.length-1; while(lo<=hi){ int m=(lo+hi)>>>1; if(a[m]==x) return m; if(a[m]<x) lo=m+1; else hi=m-1; } return -1; }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Easy,Search/Sort
Valid Parentheses (Java),"Given a string of brackets, determine if the order is valid. Write the Java function as specified.","import java.util.*; class Solution{ boolean isValid(String s){ Map<Character,Character> m=Map.of(')', '(', ']', '[', '}', '{'); Deque<Character> st=new ArrayDeque<>(); for(char ch: s.toCharArray()){ if(m.containsValue(ch)) st.push(ch); else if(m.containsKey(ch)){ if(st.isEmpty() || st.pop()!=m.get(ch)) return false; } } return st.isEmpty(); }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Medium,Stack/Queue
Max Subarray (Java),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the Java function as specified.,"class Solution{ int maxSubArray(int[] a){ int best=a[0],cur=a[0]; for(int i=1;i<a.length;i++){ cur=Math.max(a[i],cur+a[i]); best=Math.max(best,cur);} return best; }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Medium,Arrays
Greatest Common Divisor (Java),Compute the GCD of two integers using the Euclidean algorithm. Write the Java function as specified.,"class Solution{ int gcd(int a,int b){ while(b!=0){ int t=a%b; a=b; b=t;} return a; }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Easy,Math
Longest Common Subsequence (Java),Return the length of the longest common subsequence of two strings. Write the Java function as specified.,"class Solution{ int lcs(String a,String b){ int n=a.length(),m=b.length(); int[][] dp=new int[n+1][m+1]; for(int i=0;i<n;i++){ for(int j=0;j<m;j++){ dp[i+1][j+1]= a.charAt(i)==b.charAt(j)? dp[i][j]+1: Math.max(dp[i][j+1],dp[i+1][j]); } } return dp[n][m]; }}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Java,Hard,DP
Reverse a String (C),Write a function that returns the reverse of the input string. Write the C function as specified.,"#include <string.h>
void reverse(char *s){ int i=0,j=strlen(s)-1; while(i<j){ char t=s[i]; s[i]=s[j]; s[j]=t; i++; j--; } }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Easy,Strings
Is Palindrome (C),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the C function as specified.","#include <ctype.h>
#include <string.h>
int isPalindrome(const char* s){ int i=0,j=strlen(s)-1; while(i<j){ while(i<j && !isalnum((unsigned char)s[i])) i++; while(i<j && !isalnum((unsigned char)s[j])) j--; if(tolower((unsigned char)s[i])!=tolower((unsigned char)s[j])) return 0; i++; j--; } return 1; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Easy,Strings
Two Sum (C),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the C function as specified.","#include <stdlib.h>
// returns malloc'd array of size 2 or NULL
int* two_sum(int* a,int n,int t){ for(int i=0;i<n;i++) for(int j=i+1;j<n;j++) if(a[i]+a[j]==t){int* r=malloc(2*sizeof(int)); r[0]=i; r[1]=j; return r;} return NULL;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Medium,Arrays
Binary Search (C),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the C function as specified.","int binary_search(int* a,int n,int x){ int lo=0,hi=n-1; while(lo<=hi){ int m=lo+(hi-lo)/2; if(a[m]==x) return m; if(a[m]<x) lo=m+1; else hi=m-1; } return -1; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Easy,Search/Sort
Valid Parentheses (C),"Given a string of brackets, determine if the order is valid. Write the C function as specified.","#include <stdlib.h>
int isValid(const char* s){ char st[10000]; int top=-1; for(const char* p=s; *p; ++p){ char ch=*p; if(ch=='('||ch=='['||ch=='{') st[++top]=ch; else if(ch==')'||ch==']'||ch=='}'){ if(top<0) return 0; char t=st[top--]; if((ch==')'&&t!='(')||(ch==']'&&t!='[')||(ch=='}'&&t!='{')) return 0; } } return top==-1; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Medium,Stack/Queue
Max Subarray (C),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the C function as specified.,"int max_subarray(int* a,int n){ int best=a[0],cur=a[0]; for(int i=1;i<n;i++){ cur = (a[i]>cur+a[i])?a[i]:cur+a[i]; best = (best>cur)?best:cur; } return best; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Medium,Arrays
Greatest Common Divisor (C),Compute the GCD of two integers using the Euclidean algorithm. Write the C function as specified.,"int gcd(int a,int b){ while(b){ int t=a%b; a=b; b=t;} return a; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Easy,Math
Longest Common Subsequence (C),Return the length of the longest common subsequence of two strings. Write the C function as specified.,"int lcs(const char* a,const char* b){ int n=strlen(a),m=strlen(b); int dp[n+1][m+1]; memset(dp,0,sizeof(dp)); for(int i=0;i<n;i++) for(int j=0;j<m;j++) dp[i+1][j+1]= a[i]==b[j]? dp[i][j]+1: (dp[i][j+1]>dp[i+1][j]?dp[i][j+1]:dp[i+1][j]); return dp[n][m]; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C,Hard,DP
Reverse a String (C++),Write a function that returns the reverse of the input string. Write the C++ function as specified.,"#include <algorithm>
#include <string>
std::string reverseString(std::string s){ std::reverse(s.begin(), s.end()); return s; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Easy,Strings
Is Palindrome (C++),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the C++ function as specified.","#include <cctype>
#include <string>
bool isPalindrome(const std::string& s){ int i=0,j=(int)s.size()-1; while(i<j){ while(i<j && !std::isalnum((unsigned char)s[i])) i++; while(i<j && !std::isalnum((unsigned char)s[j])) j--; if(std::tolower((unsigned char)s[i])!=std::tolower((unsigned char)s[j])) return false; i++; j--; } return true; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Easy,Strings
Two Sum (C++),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the C++ function as specified.","#include <unordered_map>
#include <vector>
std::vector<int> twoSum(const std::vector<int>& a,int t){ std::unordered_map<int,int> m; for(int i=0;i<(int)a.size();++i){ auto it=m.find(t-a[i]); if(it!=m.end()) return {it->second,i}; m[a[i]]=i;} return {}; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Medium,Arrays
Binary Search (C++),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the C++ function as specified.","int binarySearch(const std::vector<int>& a,int x){ int lo=0,hi=(int)a.size()-1; while(lo<=hi){ int m=lo+(hi-lo)/2; if(a[m]==x) return m; if(a[m]<x) lo=m+1; else hi=m-1; } return -1; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Easy,Search/Sort
Valid Parentheses (C++),"Given a string of brackets, determine if the order is valid. Write the C++ function as specified.","#include <stack>
#include <string>
bool isValid(const std::string& s){ std::stack<char> st; for(char ch: s){ if(ch=='('||ch=='['||ch=='{') st.push(ch); else if(ch==')'||ch==']'||ch=='}'){ if(st.empty()) return false; char t=st.top(); st.pop(); if((ch==')'&&t!='(')||(ch==']'&&t!='[')||(ch=='}'&&t!='{')) return false; } } return st.empty(); }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Medium,Stack/Queue
Max Subarray (C++),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the C++ function as specified.,"int maxSubArray(const std::vector<int>& a){ int best=a[0],cur=a[0]; for(size_t i=1;i<a.size();++i){ cur=std::max(a[i],cur+a[i]); best=std::max(best,cur);} return best; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Medium,Arrays
Greatest Common Divisor (C++),Compute the GCD of two integers using the Euclidean algorithm. Write the C++ function as specified.,"int gcd_int(int a,int b){ while(b){ int t=a%b; a=b; b=t;} return a; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Easy,Math
Longest Common Subsequence (C++),Return the length of the longest common subsequence of two strings. Write the C++ function as specified.,"#include <vector>
#include <string>
int lcs(const std::string& a,const std::string& b){ int n=a.size(),m=b.size(); std::vector<std::vector<int>> dp(n+1,std::vector<int>(m+1)); for(int i=0;i<n;i++) for(int j=0;j<m;j++) dp[i+1][j+1]= (a[i]==b[j])? dp[i][j]+1: std::max(dp[i][j+1],dp[i+1][j]); return dp[n][m]; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C++,Hard,DP
Reverse a String (C#),Write a function that returns the reverse of the input string. Write the C# function as specified.,string ReverseString(string s){ var a=s.ToCharArray(); System.Array.Reverse(a); return new string(a);},Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Easy,Strings
Is Palindrome (C#),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the C# function as specified.",bool IsPalindrome(string s){ var t=new System.Text.StringBuilder(); foreach(var ch in s){ if(char.IsLetterOrDigit(ch)) t.Append(char.ToLower(ch)); } var str=t.ToString(); var arr=str.ToCharArray(); System.Array.Reverse(arr); return str==new string(arr);},Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Easy,Strings
Two Sum (C#),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the C# function as specified.","using System.Collections.Generic; int[] TwoSum(int[] a,int t){ var m=new Dictionary<int,int>(); for(int i=0;i<a.Length;i++){ if(m.ContainsKey(t-a[i])) return new[]{m[t-a[i]],i}; m[a[i]]=i;} return System.Array.Empty<int>(); }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Medium,Arrays
Binary Search (C#),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the C# function as specified.","int BinarySearch(int[] a,int x){ int lo=0,hi=a.Length-1; while(lo<=hi){ int m=(lo+hi)/2; if(a[m]==x) return m; if(a[m]<x) lo=m+1; else hi=m-1; } return -1; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Easy,Search/Sort
Valid Parentheses (C#),"Given a string of brackets, determine if the order is valid. Write the C# function as specified.",using System.Collections.Generic; bool IsValid(string s){ var st=new Stack<char>(); foreach(var ch in s){ if(ch=='('||ch=='['||ch=='{') st.Push(ch); else if(ch==')'||ch==']'||ch=='}'){ if(st.Count==0) return false; var t=st.Pop(); if((ch==')'&&t!='(')||(ch==']'&&t!='[')||(ch=='}'&&t!='{')) return false; } } return st.Count==0; },Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Medium,Stack/Queue
Max Subarray (C#),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the C# function as specified.,"int MaxSubArray(int[] a){ int best=a[0],cur=a[0]; for(int i=1;i<a.Length;i++){ cur=Math.Max(a[i],cur+a[i]); best=Math.Max(best,cur);} return best;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Medium,Arrays
Greatest Common Divisor (C#),Compute the GCD of two integers using the Euclidean algorithm. Write the C# function as specified.,"int Gcd(int a,int b){ while(b!=0){ int t=a%b; a=b; b=t;} return a;}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Easy,Math
Longest Common Subsequence (C#),Return the length of the longest common subsequence of two strings. Write the C# function as specified.,"int Lcs(string a,string b){ int n=a.Length,m=b.Length; var dp=new int[n+1,m+1]; for(int i=0;i<n;i++) for(int j=0;j<m;j++) dp[i+1,j+1]= a[i]==b[j]? dp[i,j]+1: System.Math.Max(dp[i,j+1],dp[i+1,j]); return dp[n,m]; }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,C#,Hard,DP
Reverse a String (Go),Write a function that returns the reverse of the input string. Write the Go function as specified.,"func ReverseString(s string) string { r:=[]rune(s); for i,j:=0,len(r)-1;i<j;i,j=i+1,j-1{ r[i],r[j]=r[j],r[i] } ; return string(r)}",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Easy,Strings
Is Palindrome (Go),"Given a string, determine if it is a palindrome (ignore non-alphanumeric and case). Write the Go function as specified.","import (""unicode"")
func IsPalindrome(s string) bool { var r []rune; for _,ch:= range s { if unicode.IsLetter(ch) || unicode.IsDigit(ch){ if ch>='A' && ch<='Z' { ch=ch+32 } ; r=append(r,ch) } } for i,j:=0,len(r)-1; i<j; i,j=i+1,j-1 { if r[i]!=r[j] { return false } } ; return true }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Easy,Strings
Two Sum (Go),"Given an array of integers and a target, return the indices of the two numbers that add up to the target. Write the Go function as specified.","func TwoSum(a []int,t int) []int { m:=map[int]int{}; for i,x:= range a { if j,ok:=m[t-x]; ok { return []int{j,i} } ; m[x]=i } ; return []int{} }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Medium,Arrays
Binary Search (Go),"Return the index of x in a sorted array using binary search, or -1 if not found. Write the Go function as specified.","func BinarySearch(a []int,x int) int { lo,hi:=0,len(a)-1; for lo<=hi { m:=lo+(hi-lo)/2; if a[m]==x { return m } ; if a[m]<x { lo=m+1 } else { hi=m-1 } } ; return -1 }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Easy,Search/Sort
Valid Parentheses (Go),"Given a string of brackets, determine if the order is valid. Write the Go function as specified.","func IsValid(s string) bool { st:=[]rune{}; match:=map[rune]rune{')':'(',']':'[','}':'{'}; for _,ch:=range s{ if ch=='('||ch=='['||ch=='{'{ st=append(st,ch) } else if ch==')'||ch==']'||ch=='}' { if len(st)==0 || st[len(st)-1]!=match[ch]{ return false } ; st=st[:len(st)-1] } } ; return len(st)==0 }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Medium,Stack/Queue
Max Subarray (Go),Find the contiguous subarray with the largest sum (Kadane's algorithm). Write the Go function as specified.,"func MaxSubArray(a []int) int { best,cur:=a[0],a[0]; for i:=1;i<len(a);i++{ if cur+a[i] > a[i] { cur=cur+a[i] } else { cur=a[i] } ; if cur>best { best=cur } } ; return best }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Medium,Arrays
Greatest Common Divisor (Go),Compute the GCD of two integers using the Euclidean algorithm. Write the Go function as specified.,"func GCD(a,b int) int { for b!=0 { a,b=b,a%b } ; return a }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Easy,Math
Longest Common Subsequence (Go),Return the length of the longest common subsequence of two strings. Write the Go function as specified.,"func LCS(a,b string) int { n,m:=len(a),len(b); dp:=make([][]int,n+1); for i:=range dp{ dp[i]=make([]int,m+1)}; for i:=0;i<n;i++{ for j:=0;j<m;j++{ if a[i]==b[j]{ dp[i+1][j+1]=dp[i][j]+1 } else { if dp[i][j+1]>dp[i+1][j]{ dp[i+1][j+1]=dp[i][j+1] } else { dp[i+1][j+1]=dp[i+1][j] } } } } ; return dp[n][m] }",Use appropriate data structures; Consider edge cases; Aim for O(n) or O(log n) where possible,Go,Hard,DP
Longest Increasing Subsequence (length) (Python),"Given an integer array, return the length of the longest strictly increasing subsequence.","def length_of_LIS(nums):
    import bisect
    d=[]
    for x in nums:
        i=bisect.bisect_left(d,x)
        if i==len(d): d.append(x)
        else: d[i]=x
    return len(d)",Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,Python,Hard,DP
Longest Increasing Subsequence (length) (JS),"Given an integer array, return the length of the longest strictly increasing subsequence.",function lengthOfLIS(a){const d=[]; for(const x of a){ let i=d.findIndex(v=>v>=x); if(i===-1) d.push(x); else d[i]=x; } return d.length;},Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,JS,Hard,DP
Longest Increasing Subsequence (length) (Java),"Given an integer array, return the length of the longest strictly increasing subsequence.","import java.util.*; class Solution{ int lengthOfLIS(int[] a){ ArrayList<Integer> d=new ArrayList<>(); for(int x: a){ int i=Collections.binarySearch(d,x); if(i<0)i=-(i+1); if(i==d.size()) d.add(x); else d.set(i,x);} return d.size(); }}",Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,Java,Hard,DP
Longest Increasing Subsequence (length) (C++),"Given an integer array, return the length of the longest strictly increasing subsequence.","#include <vector>
#include <algorithm>
int lengthOfLIS(const std::vector<int>& a){ std::vector<int> d; for(int x: a){ auto it=std::lower_bound(d.begin(),d.end(),x); if(it==d.end()) d.push_back(x); else *it=x; } return (int)d.size(); }",Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,C++,Hard,DP
Longest Increasing Subsequence (length) (C#),"Given an integer array, return the length of the longest strictly increasing subsequence.",using System; using System.Collections.Generic; int LengthOfLIS(int[] a){ var d=new List<int>(); foreach(var x in a){ int i=d.BinarySearch(x); if(i<0) i=~i; if(i==d.Count) d.Add(x); else d[i]=x; } return d.Count; },Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,C#,Hard,DP
Longest Increasing Subsequence (length) (Go),"Given an integer array, return the length of the longest strictly increasing subsequence.","func LengthOfLIS(a []int) int { d:=[]int{}; for _,x:= range a { // lower_bound
        i:=0; j:=len(d); for i<j { m:=(i+j)/2; if d[m] < x { i=m+1 } else { j=m } } ; if i==len(d){ d=append(d,x) } else { d[i]=x } } ; return len(d) }",Patience sorting with binary search; DP O(n^2) is acceptable for smaller inputs,Go,Hard,DP
Second Highest Salary (SQL),Write an SQL query to solve the task: Second Highest Salary. Assume sensible table/column names as hinted in the solution.,"SELECT MAX(salary) AS second_highest
FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);",Use GROUP BY / window functions where appropriate; Be careful with NULLs; Consider ties,SQL,Medium,SQL
Find Duplicates (SQL),Write an SQL query to solve the task: Find Duplicates. Assume sensible table/column names as hinted in the solution.,"SELECT col, COUNT(*) AS cnt
FROM my_table
GROUP BY col
HAVING COUNT(*) > 1;",Use GROUP BY / window functions where appropriate; Be careful with NULLs; Consider ties,SQL,Medium,SQL
Top Customers by Spend (SQL),Write an SQL query to solve the task: Top Customers by Spend. Assume sensible table/column names as hinted in the solution.,"SELECT customer_id, SUM(amount) AS total_spend
FROM payments
GROUP BY customer_id
ORDER BY total_spend DESC
LIMIT 10;",Use GROUP BY / window functions where appropriate; Be careful with NULLs; Consider ties,SQL,Medium,SQL
Rolling 7-Day Active Users (SQL),Write an SQL query to solve the task: Rolling 7-Day Active Users. Assume sensible table/column names as hinted in the solution.,"SELECT date, COUNT(DISTINCT user_id) AS dau,
       SUM(COUNT(DISTINCT user_id)) OVER (ORDER BY date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7d
FROM events
GROUP BY date
ORDER BY date;",Use GROUP BY / window functions where appropriate; Be careful with NULLs; Consider ties,SQL,Hard,SQL
